https://esbook.kimjmin.net/07-settings-and-mappings/7.2-mappings

<매핑>
매핑은 rdbms의 스키마에 해당됨.

PUT books/_doc/1
{
  "title": "Romeo and Juliet",
  "author": "William Shakespeare",
  "category": "Tragedies",
  "publish_date": "1562-12-01T00:00:00",
  "pages": 125
}

GET books/_mapping

위처럼 mapping 설정 미리 안하면 자동으로 매핑이 설정되서 너무 많은 정보를 담고 있어 좋지는 않다.
-> 인덱스의 매핑 미리 정의해놓으면 그에 맞춰 데이터가 입력됨.

- 이미 만들어진 매핑에 필드를 추가는 가능 (바꿀 수는 x)

- 매핑에 필드 추가
PUT books/_mapping
{
  "properties":{
    "content": {
      "type": "text"
    }
  }
}

- match 검색
GET books/_search
{
  "query": {
    "match": {
      "title": "Juliet"
    }
  }
}

- title.keyword 활용 검색
GET books/_search
{
  "query": {
    "match": {
      "title.keyword": "Romeo and Juliet"
    }
  }
}

-문자의 경우 keyword로 저장하냐, text로 저장하냐가 중요한듯 하다.
- 숫자의 경우 long, integer, short


DELETE books 로 지웠으면 PUT books/_mapping 은 안되고 (인덱스 생성 안되어있어서)

PUT books
	{"mapping": {
		.....
			}
	}  
-----> 이런식으로 안에 mapping을 넣어주고 mapping 정보를 입력해줘야

이렇게 mapping을 우선 구성해준 뒤에


PUT books/_doc/1
{
  "title": "Romeo and Juliet",
  "author": "William Shakespeare",
  "category": "Tragedies",
  "publish_date": "1562-12-01T00:00:00",
  "pages": 125
}  
-----> 이렇게 document를 입력해준다.


<필드 안에 특정 조건들 추가>

properties 안에 "author" 필드가 있음.

"author": {
            "type": "text",
            "fields": {
              "full": {
                "type": "keyword",
                "ignore_above": 256
              }
            }
          }

여기에  nori 옵션을 추가

"author": {
            "type": "text",
            "fields": {
              "full": {
                "type": "keyword",
                "ignore_above": 256
              },
              "nori": {
                "type": "text",
                "analyzer": "nori"
              }
            }
          }

이제 author는 standard analyzer를 사용하지만, author.nori는 nori analyzer을 사용한다.


<숫자 형식>

PUT number_test
{
  "mappings": {
    "properties": {
      "value": {
        "type": "integer"
      }
    }
  }
}
----> 이렇게 type을 "integer"로 설정하면


PUT number_test/_doc/3
{
  "value": 3.5
}
----> 이렇게 저장하면 value는 3.0으로 저장된다.  ("2"로 저장하면 문자열이 숫자로 자동 인식됨)

그래서 

GET number_test/_search
{
  "query": {
    "range": {
      "value": {
        "gt": 0.9,
        "lt": 3.1
      }
    }
  }
}
------> 이런 식으로 조회하면 3.0은 범위 안에 있어서 조회가 된다.

이런식으로 내부적으로는 type의 영향을 받고 저장됨을 기억하자

!!! 또한, 연속적으로 값을 넣을 때 처음 넣은 값이 1이면 뒤에 값도 1의 형태인 long으로 통일되어 저장된다.
----> 그러므로 처음부터 mapping으로 float나 double로 만든다.


PUT number_test
{
  "mappings": {
    "properties": {
      "value": {
        "type": "integer",
        "coerce": false
      }
    }
  }
}
------> 이렇게 "coerce": false를 추가해주면 integer값이 아닌 값이 PUT되면 오류를 반환해준다.



PUT my_date/_doc/1
{
  "date": "12/Aug/2020:01:24:44"
}
----> 이런식으로 넣고

GET my_date/_mapping 해보면 type이 date가 아닌 keyword로 인식되어 있다.


PUT my_date
{
  "mappings": {
    "properties": {
      "date":{
        "type": "date",
        "format": "dd/MMM/yyy:HH:mm:ss"
      }
    }
  }
}
----> 이런식으로 날짜 형식 format을 미리 설정해주고 데이터를 put하고 조회하면 type이 date로 잘 되어있다.

그런데 이렇게 하면 다른 자동으로 date로 인식되는 형식들(iso8601에 준하는 형식)은 또 안된다.

"format": "dd/MMM/yyy:HH:mm:ss||iso8601" 로 설정해주면 위 다른 형식들도 같이 date로 인식된다.

"format": "dd/MMM/yyy:HH:mm:ss||iso8601||epoch_mills" 처럼 추가적인 형식 추가 가능


날짜는 검색할 때 range를 사용










